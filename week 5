#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX_STACK_SIZE 100

// Stack structure
typedef struct {
    int top;
    int items[MAX_STACK_SIZE];
} Stack;

// Function prototypes
void push(Stack *s, int value);
int pop(Stack *s);
int evaluatePostfix(char* expr);

int main() {
    char expr[100];
    printf("Enter a postfix expression: ");
    fgets(expr, sizeof(expr), stdin);

    int result = evaluatePostfix(expr);
    printf("Result of postfix expression: %d\n", result);

    return 0;
}

// Function to push an element onto the stack
void push(Stack *s, int value) {
    if (s->top == MAX_STACK_SIZE - 1) {
        printf("Stack overflow\n");
        exit(1);
    } else {
        s->items[++(s->top)] = value;
    }
}

// Function to pop an element from the stack
int pop(Stack *s) {
    if (s->top == -1) {
        printf("Stack underflow\n");
        exit(1);
    } else {
        return s->items[(s->top)--];
    }
}

// Function to evaluate postfix expression
int evaluatePostfix(char* expr) {
    Stack stack;
    stack.top = -1;
    char *token = expr;

    while (*token != '\0') {
        if (isdigit(*token)) {
            push(&stack, *token - '0'); // Convert char to integer
        } else if (*token == '+' || *token == '-' || *token == '*' || *token == '/') {
            int operand2 = pop(&stack);
            int operand1 = pop(&stack);
            int result;
            
            switch (*token) {
                case '+':
                    result = operand1 + operand2;
                    break;
                case '-':
                    result = operand1 - operand2;
                    break;
                case '*':
                    result = operand1 * operand2;
                    break;
                case '/':
                    result = operand1 / operand2;
                    break;
                default:
                    printf("Invalid operator\n");
                    exit(1);
            }
            
            push(&stack, result);
        }
        token++;
    }

    return pop(&stack); // The final result is on top of the stack
}
