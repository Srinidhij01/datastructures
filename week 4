#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>   // for isdigit function
#include <string.h>  // for strlen function

#define MAX_SIZE 100

// Structure of Stack
struct Stack {
    int top;
    unsigned capacity;
    char* array;
};

// Function to create a stack of given capacity
struct Stack* createStack(unsigned capacity) {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    if (!stack) return NULL;
    stack->top = -1;
    stack->capacity = capacity;
    stack->array = (char*)malloc(stack->capacity * sizeof(char));
    if (!stack->array) return NULL;
    return stack;
}

// Function to check if the stack is full
int isFull(struct Stack* stack) {
    return stack->top == stack->capacity - 1;
}

// Function to check if the stack is empty
int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

// Function to push an item to stack
void push(struct Stack* stack, char item) {
    if (isFull(stack)) return;
    stack->array[++stack->top] = item;
}

// Function to pop an item from stack
char pop(struct Stack* stack) {
    if (isEmpty(stack)) return '\0';
    return stack->array[stack->top--];
}

// Function to get the top item from stack
char peek(struct Stack* stack) {
    if (isEmpty(stack)) return '\0';
    return stack->array[stack->top];
}

// Function to check if the character is an operator
int isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/');
}

// Function to get the precedence of operators
int precedence(char ch) {
    switch (ch) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        default:
            return 0;
    }
}

// Function to convert infix expression to postfix expression
void infixToPostfix(char* infix, char* postfix) {
    struct Stack* stack = createStack(strlen(infix) + 1);
    int i, k;
    for (i = 0, k = -1; infix[i]; ++i) {
        // If the scanned character is an operand, add it to output
        if (isdigit(infix[i]) || isalpha(infix[i]))
            postfix[++k] = infix[i];
        
        // If the scanned character is an '(', push it to the stack
        else if (infix[i] == '(')
            push(stack, infix[i]);
        
        // If the scanned character is an ')', pop and output from the stack
        // until an '(' is encountered
        else if (infix[i] == ')') {
            while (!isEmpty(stack) && peek(stack) != '(')
                postfix[++k] = pop(stack);
            if (!isEmpty(stack) && peek(stack) != '(')
                return;  // invalid expression
            else
                pop(stack);
        }
        // An operator is encountered
        else {
            while (!isEmpty(stack) && precedence(infix[i]) <= precedence(peek(stack)))
                postfix[++k] = pop(stack);
            push(stack, infix[i]);
        }
    }
    // Pop all the operators from the stack
    while (!isEmpty(stack))
        postfix[++k] = pop(stack);
    postfix[++k] = '\0';
}

int main() {
    char infix[MAX_SIZE];
    char postfix[MAX_SIZE];
    
    printf("Enter infix expression: ");
    fgets(infix, MAX_SIZE, stdin);
    infix[strlen(infix) - 1] = '\0';  // Removing '\n' from fgets input
    
    infixToPostfix(infix, postfix);
    printf("Postfix expression: %s\n", postfix);
    
    return 0;
}
